#!/usr/bin/env ruby
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  puts "\n== Restarting application server =="
  system! "bin/rails restart"

  puts "== Creating babel.config.js file =="

  babel_config_path = File.join(APP_ROOT, 'babel.config.js')
  unless File.exist?(babel_config_path)
    # Create babel.config.js
    FileUtils.touch(babel_config_path)

    puts "== Adding presets to babel.config.js =="
    # Add presets to babel.config.js
    File.open(babel_config_path, 'w') do |file|
      file.write <<~JS
        module.exports = {
          presets: [
            [
              '@babel/preset-env',
              {
                targets: {
                  node: 'current',
                },
              },
            ],
            '@babel/preset-react',
          ],
        };
     JS
    end
  else
    puts "== babel.config.js already exists =="
  end



  puts "== Adding webpack module rules to webpack.config.js =="

  # Add module rules to webpack.config.js
  webpack_config_file = File.join(APP_ROOT,'webpack.config.js')
  webpack_config = File.read(webpack_config_file)
  if (webpack_config.include? "module: {")
    puts "== module: { already exists in webpack.config.js =="
  else
    updated_webpack_config = webpack_config.gsub(/module.exports = {/, "module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: ['babel-loader'],\n      },\n    ],\n  },")
    File.open(webpack_config_file, 'w') do |file|
      file.write(updated_webpack_config)
    end
  end

  puts "== Adding Linters per microverse == "

  linter = File.join(APP_ROOT, '.github/workflows/linters.yml')
  FileUtils.mkdir_p(File.dirname(linter))
  unless File.exist?(linter)
    # Create linters.yml
    FileUtils.touch(linter)

    puts "== Adding linters.yml =="
    # Add linters.yml
    File.open(linter, 'w') do |file|
      file.write <<~YML
      name: Linters

      on: pull_request

      env:
        FORCE_COLOR: 1

      jobs:
        rubocop:
          name: Rubocop
          runs-on: ubuntu-22.04
          steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-ruby@v1
              with:
                ruby-version: 3.1.x
            - name: Setup Rubocop
              run: |
                gem install --no-document rubocop -v '>= 1.0, < 2.0' # https://docs.rubocop.org/en/stable/installation/
                [ -f .rubocop.yml ] || wget https://raw.githubusercontent.com/microverseinc/linters-config/master/ror/.rubocop.yml
            - name: Rubocop Report
              run: rubocop --color
        stylelint:
          name: Stylelint
          runs-on: ubuntu-22.04
          steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v1
              with:
                node-version: "18.x"
            - name: Setup Stylelint
              run: |
                npm install --save-dev stylelint@13.x stylelint-scss@3.x stylelint-config-standard@21.x stylelint-csstree-validator@1.x
                [ -f .stylelintrc.json ] || wget https://raw.githubusercontent.com/microverseinc/linters-config/master/ror/.stylelintrc.json
            - name: Stylelint Report
              run: npx stylelint "**/*.{css,scss}"
        nodechecker:
          name: node_modules checker
          runs-on: ubuntu-22.04
          steps:
            - uses: actions/checkout@v2
            - name: Check node_modules existence
              run: |
                if [ -d "node_modules/" ]; then echo -e "\e[1;31mThe node_modules/ folder was pushed to the repo. Please remove it from the GitHub repository and try again."; echo -e "\e[1;32mYou can set up a .gitignore file with this folder included on it to prevent this from happening in the future." && exit 1; fi
      YML

    end
  end

  puts "== Installing Linters =="

  puts "Installing Rubocop..."
  system "gem install --no-document rubocop -v '>= 1.0, < 2.0'"
  puts "Rubocop installed!"

  puts "Downloading .rubocop.yml..."
  system "[ -f .rubocop.yml ] || wget https://raw.githubusercontent.com/microverseinc/linters-config/master/ror/.rubocop.yml"
  puts ".rubocop.yml downloaded!"

  puts "Installing Stylelint..."
  system('npm install --save-dev stylelint@13.x stylelint-scss@3.x stylelint-config-standard@21.x stylelint-csstree-validator@1.x')

  puts "Stylelint downloaded!"
  system('[ -f .stylelintrc.json ] || wget https://raw.githubusercontent.com/microverseinc/linters-config/master/ror/.stylelintrc.json')


end
